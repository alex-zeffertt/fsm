#!/bin/bash -e
usage()
{
    echo "Usage: $0 -i <input-table-header> -c <table-class-name> -o <output-png>"
    exit 1
}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
      -i|--input)
          INPUT="$2"
          shift 2
          ;;
      -c|--class)
          CLASS="$2"
          shift 2
          ;;
      -o|--output)
          OUTPUT="$2"
          shift 2
          ;;
      *)
          usage
          ;;
  esac
done

if [ -z "$INPUT" -o -z "$CLASS" -o -z "$OUTPUT" ] ;then
    usage
fi

EXE=$(mktemp)
cat <<EOF | g++ -x c++ - -o "$EXE"
#include "$INPUT"
#include <iostream>

int main()
{
    std::cout << "digraph D{\n";
    std::cout << "graph [ resolution=128, fontname=Arial, fontcolor=blue, fontsize=12 ];\n";
    std::cout << "node [ fontname=Arial, fontcolor=blue, fontsize=12];\n";
    std::cout << "edge [ fontname=Helvetica, fontcolor=blue, fontsize=6 ];\n";

    for (int old_state = 0; old_state < $CLASS::NUM_STATES; old_state++)
    {
        for (int event = 0; event < $CLASS::NUM_EVENTS; event++)
        {
            auto [action, new_state] = $CLASS::transitions[old_state][event];
            if (action != $CLASS::AC_IGNORE_EVENT)
            {
                std::cout << $CLASS::state_names[old_state]               //
                          << " -> " << $CLASS::state_names[new_state]     //
                          << " [label=<<u>" << $CLASS::event_names[event] //
                          << "</u><br/>" << $CLASS::action_names[action]  //
                          << ">];\n";
            }
        }
    }
    std::cout << "}\n";
    return 0;
}
EOF

$EXE | dot -Tpng -o "$OUTPUT"
rm $EXE
